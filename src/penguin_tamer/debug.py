"""Debug utilities for LLM request visualization."""

import json
from typing import List, Dict

# –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Rich
_console = None
_panel = None
_syntax = None


def _get_console():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Console –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _console
    if _console is None:
        from rich.console import Console
        _console = Console
    return _console


def _get_panel():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Panel –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _panel
    if _panel is None:
        from rich.panel import Panel
        _panel = Panel
    return _panel


def _get_syntax():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Syntax –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _syntax
    if _syntax is None:
        from rich.syntax import Syntax
        _syntax = Syntax
    return _syntax


def debug_print_messages(messages: List[Dict[str, str]], 
                        client = None,
                        phase: str = "request") -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM –≤ —É–¥–æ–±–Ω–æ–º —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
    —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞–Ω–µ–ª—è–º.
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI (role, content)
        client: –û–±—ä–µ–∫—Ç OpenRouterClient —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π LLM
        phase: –§–∞–∑–∞ –æ—Ç–ª–∞–¥–∫–∏ ("request" –∏–ª–∏ "response")
    
    Example:
        >>> debug_print_messages(
        ...     [{"role": "system", "content": "You are a helper"},
        ...      {"role": "user", "content": "Hello!"}],
        ...     client=openrouter_client,
        ...     phase="request"
        ... )
    """
    Console = _get_console()
    Panel = _get_panel()
    Syntax = _get_syntax()
    
    console = Console()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞
    if client:
        model = client.model
        temperature = client.temperature
        max_tokens = client.max_tokens
        top_p = client.top_p
        frequency_penalty = client.frequency_penalty
        presence_penalty = client.presence_penalty
        stop = client.stop
        seed = client.seed
    else:
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        model = None
        temperature = None
        max_tokens = None
        top_p = None
        frequency_penalty = None
        presence_penalty = None
        stop = None
        seed = None
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    phase_info = {
        "request": (">>> Raw LLM Request Data", ">>> Complete API Request"),
        "response": ("<<< LLM Response Data", "<<< Full Conversation State")
    }
    
    main_title, api_title = phase_info.get(phase, phase_info["request"])
    title_parts = [main_title]
    if model:
        title_parts.append(f"Model: {model}")
    
    title = " | ".join(title_parts)
    
    console.print("\n" + "=" * 90)
    console.print(f"[bold cyan]{title}[/bold cyan]")
    console.print("=" * 90 + "\n")
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API –∑–∞–ø—Ä–æ—Å–∞
    api_request = {
        "model": model,
        "messages": messages,
        "stream": True  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ penguin-tamer
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
    if temperature is not None:
        api_request["temperature"] = temperature
    if max_tokens is not None:
        api_request["max_tokens"] = max_tokens
    if top_p is not None and top_p != 1.0:
        api_request["top_p"] = top_p
    if frequency_penalty is not None and frequency_penalty != 0.0:
        api_request["frequency_penalty"] = frequency_penalty
    if presence_penalty is not None and presence_penalty != 0.0:
        api_request["presence_penalty"] = presence_penalty
    if stop is not None:
        api_request["stop"] = stop
    if seed is not None:
        api_request["seed"] = seed
    
    # –ü–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω—ã–º API –∑–∞–ø—Ä–æ—Å–æ–º/–æ—Ç–≤–µ—Ç–æ–º
    full_request_json = json.dumps(api_request, ensure_ascii=False, indent=2)
    api_syntax = Syntax(
        full_request_json, 
        "json", 
        theme="monokai",
        line_numbers=True,
        word_wrap=True,
        background_color="default"
    )
    
    # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è request/response
    border_color = "yellow" if phase == "request" else "green"
    title_color = "bold yellow" if phase == "request" else "bold green"
    
    api_panel = Panel(
        api_syntax,
        title=f"[{title_color}]{api_title}[/{title_color}]",
        border_style=border_color,
        padding=(1, 1)
    )
    console.print(api_panel)
    console.print()
    
    # –†–æ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
    role_colors = {
        "system": "magenta",
        "user": "green", 
        "assistant": "blue"
    }
    
    role_icons = {
        "system": "‚öôÔ∏è",
        "user": "üë§",
        "assistant": "ü§ñ"
    }
    
    # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON
    console.print(f"[bold white]>>> Messages Breakdown ({len(messages)} total):[/bold white]")
    console.print()
    
    for idx, msg in enumerate(messages, 1):
        role = msg.get("role", "unknown")
        role_color = role_colors.get(role, "white")
        role_icon = role_icons.get(role, "[?]")
        
        # –°–æ–∑–¥–∞—ë–º JSON –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_json = json.dumps(msg, ensure_ascii=False, indent=2)
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è JSON
        message_syntax = Syntax(
            message_json,
            "json",
            theme="monokai",
            line_numbers=True,
            word_wrap=True,
            background_color="default"
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ä–æ–ª—å—é
        title = f"[bold]{role_icon} Message #{idx}: {role.upper()}[/bold]"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        content_length = len(msg.get("content", ""))
        stats = f"[dim]Length: {content_length} chars[/dim]"
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–Ω–µ–ª—å —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        panel = Panel(
            message_syntax,
            title=title,
            subtitle=stats,
            title_align="left",
            subtitle_align="right", 
            border_style=role_color,
            padding=(0, 1)
        )
        
        console.print(panel)
        console.print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_chars = sum(len(msg.get("content", "")) for msg in messages)
    total_tokens_estimate = total_chars // 4  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞)
    
    stats_text = f"[dim]üìä Total: {len(messages)} messages | {total_chars} chars | ~{total_tokens_estimate} tokens[/dim]"
    console.print(stats_text)
    console.print("=" * 90 + "\n")
