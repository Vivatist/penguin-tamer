import threading
from typing import List, Dict
import time
from penguin_tamer.text_utils import format_api_key_display
from penguin_tamer.i18n import t
from penguin_tamer.config_manager import config
from penguin_tamer.themes import get_code_theme

# –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Rich
_markdown = None
_live = None
_console = None
_panel = None
_syntax = None
_text = None


def _get_console():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Console –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _console
    if _console is None:
        from rich.console import Console
        _console = Console
    return _console


def _get_panel():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Panel –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _panel
    if _panel is None:
        from rich.panel import Panel
        _panel = Panel
    return _panel


def _get_syntax():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Syntax –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _syntax
    if _syntax is None:
        from rich.syntax import Syntax
        _syntax = Syntax
    return _syntax


def _get_text():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç Text –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    global _text
    if _text is None:
        from rich.text import Text
        _text = Text
    return _text


def debug_print_messages(messages: List[Dict[str, str]], 
                        model: str = None, 
                        temperature: float = None,
                        max_tokens: int = None,
                        top_p: float = None,
                        frequency_penalty: float = None,
                        presence_penalty: float = None,
                        stop: list = None,
                        seed: int = None) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM –≤ —É–¥–æ–±–Ω–æ–º —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ API,
    —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ä–æ–ª–µ–π –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI (role, content)
        model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        temperature: –ó–Ω–∞—á–µ–Ω–∏–µ temperature (0.0-2.0)
        max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        top_p: Nucleus sampling (0.0-1.0)
        frequency_penalty: –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä—ã (-2.0 –¥–æ 2.0)
        presence_penalty: –®—Ç—Ä–∞—Ñ –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (-2.0 –¥–æ 2.0)
        stop: –°—Ç–æ–ø-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        seed: Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
    
    Example:
        >>> debug_print_messages(
        ...     [{"role": "system", "content": "You are a helper"},
        ...      {"role": "user", "content": "Hello!"}],
        ...     model="gpt-4",
        ...     temperature=0.7,
        ...     max_tokens=2000
        ... )
    """
    Console = _get_console()
    Panel = _get_panel()
    Text = _get_text()
    
    console = Console()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    title_parts = ["üîç LLM Request Debug"]
    if model:
        title_parts.append(f"Model: {model}")
    
    title = " | ".join(title_parts)
    
    console.print("\n" + "=" * 80)
    console.print(f"[bold cyan]{title}[/bold cyan]")
    console.print("=" * 80 + "\n")
    
    # –ü–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    params_lines = []
    if temperature is not None:
        params_lines.append(f"üå°Ô∏è  Temperature: [bold yellow]{temperature}[/bold yellow]")
    if max_tokens is not None:
        params_lines.append(f"üìè Max Tokens: [bold cyan]{max_tokens}[/bold cyan]")
    if top_p is not None and top_p != 1.0:
        params_lines.append(f"üéØ Top P: [bold green]{top_p}[/bold green]")
    if frequency_penalty is not None and frequency_penalty != 0.0:
        params_lines.append(f"üîÅ Frequency Penalty: [bold magenta]{frequency_penalty}[/bold magenta]")
    if presence_penalty is not None and presence_penalty != 0.0:
        params_lines.append(f"üí≠ Presence Penalty: [bold blue]{presence_penalty}[/bold blue]")
    if stop is not None:
        stop_str = str(stop) if len(str(stop)) < 50 else str(stop)[:47] + "..."
        params_lines.append(f"üõë Stop: [dim]{stop_str}[/dim]")
    if seed is not None:
        params_lines.append(f"üå± Seed: [bold white]{seed}[/bold white]")
    
    if params_lines:
        params_panel = Panel(
            "\n".join(params_lines),
            title="[bold]Generation Parameters[/bold]",
            border_style="yellow",
            padding=(1, 2)
        )
        console.print(params_panel)
        console.print()
    
    # –†–æ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
    role_colors = {
        "system": "bold magenta",
        "user": "bold green",
        "assistant": "bold blue"
    }
    
    role_icons = {
        "system": "‚öôÔ∏è",
        "user": "üë§",
        "assistant": "ü§ñ"
    }
    
    # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for idx, msg in enumerate(messages, 1):
        role = msg.get("role", "unknown")
        content = msg.get("content", "")
        
        role_color = role_colors.get(role, "white")
        role_icon = role_icons.get(role, "‚ùì")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        header = Text()
        header.append(f"{role_icon} ", style="bold")
        header.append(f"Message #{idx}: ", style="dim")
        header.append(f"{role.upper()}", style=role_color)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if len(content) > 500:
            display_content = content[:500] + f"\n\n[dim]... (truncated, total {len(content)} chars)[/dim]"
        else:
            display_content = content
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–Ω–µ–ª—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        panel = Panel(
            display_content,
            title=header,
            title_align="left",
            border_style=role_color,
            padding=(1, 2)
        )
        
        console.print(panel)
        console.print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_chars = sum(len(msg.get("content", "")) for msg in messages)
    console.print(f"[dim]Total messages: {len(messages)} | Total characters: {total_chars}[/dim]")
    console.print("=" * 80 + "\n")


def _get_markdown():
    global _markdown
    if _markdown is None:
        from rich.markdown import Markdown
        _markdown = Markdown
    return _markdown


def _create_markdown(text: str, theme_name: str = "default"):
    """
    –°–æ–∑–¥–∞—ë—Ç Markdown –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ–º–æ–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
    
    Args:
        text: –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        theme_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    
    Returns:
        Markdown –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–π —Ç–µ–º–æ–π
    """
    Markdown = _get_markdown()
    code_theme = get_code_theme(theme_name)
    return Markdown(text, code_theme=code_theme)

def _get_live():
    global _live
    if _live is None:
        from rich.live import Live
        _live = Live
    return _live

# –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç OpenAI (—Å–∞–º—ã–π —Ç—è–∂–µ–ª—ã–π –º–æ–¥—É–ª—å)
_openai_client = None


def _get_openai_client():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
    global _openai_client
    if _openai_client is None:
        from openai import OpenAI
        _openai_client = OpenAI
    return _openai_client


class OpenRouterClient:

    def _spinner(self, stop_spinner: threading.Event, status_message: dict) -> None:
        """–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã –ò–ò —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.
        status_message - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'text' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        try:
            with self.console.status("[dim]" + status_message.get('text', t('Ai thinking...')) + "[/dim]", spinner="dots", spinner_style="dim") as status:
                while not stop_spinner.is_set():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                    current_text = status_message.get('text', t('Ai thinking...'))
                    status.update(f"[dim]{current_text}[/dim]")
                    time.sleep(0.1)
        except KeyboardInterrupt:
            pass

    def __init__(self, console, api_key: str, api_url: str, model: str,
                 system_message: dict[str, str],
                 temperature: float = 0.7,
                 max_tokens: int = None,
                 top_p: float = 0.95,
                 frequency_penalty: float = 0.0,
                 presence_penalty: float = 0.0,
                 stop: list = None,
                 seed: int = None):
        self.console = console
        self.api_key = api_key
        self.api_url = api_url
        self.model = model
        self.temperature = temperature
        self.max_tokens = max_tokens
        self.top_p = top_p
        self.frequency_penalty = frequency_penalty
        self.presence_penalty = presence_penalty
        self.stop = stop
        self.seed = seed
        self.messages: List[Dict[str, str]] = [system_message]
        self._client = None  # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

    @property
    def client(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        if self._client is None:
            self._client = _get_openai_client()(api_key=self.api_key, base_url=self.api_url)
        return self._client


    def ask_stream(self, user_input: str, educational_prompt: list = []) -> str:
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Markdown –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        # –ü–æ–∫–∞–∑ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        stop_spinner = threading.Event()
        status_message = {'text': t('Sending request...')}
        spinner_thread = threading.Thread(target=self._spinner, args=(stop_spinner, status_message), daemon=True)
        spinner_thread.start()

        self.messages.extend(educational_prompt)
        self.messages.append({"role": "user", "content": user_input})
        reply_parts = []

        # Debug mode: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞
        import os
        if os.getenv("PT_DEBUG") == "1" or config.get("global", "debug_mode", False):
            stop_spinner.set()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
            if spinner_thread.is_alive():
                spinner_thread.join(timeout=0.1)
            debug_print_messages(
                self.messages, 
                model=self.model, 
                temperature=self.temperature,
                max_tokens=self.max_tokens,
                top_p=self.top_p,
                frequency_penalty=self.frequency_penalty,
                presence_penalty=self.presence_penalty,
                stop=self.stop,
                seed=self.seed
            )
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
            stop_spinner.clear()
            spinner_thread = threading.Thread(target=self._spinner, args=(stop_spinner, status_message), daemon=True)
            spinner_thread.start()
        
        # –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞
        interrupted = threading.Event()
        
        try:
            # –§–∞–∑–∞ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
            api_params = {
                "model": self.model,
                "messages": self.messages,
                "temperature": self.temperature,
                "stream": True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
            if self.max_tokens is not None:
                api_params["max_tokens"] = self.max_tokens
            if self.top_p is not None and self.top_p != 1.0:
                api_params["top_p"] = self.top_p
            if self.frequency_penalty != 0.0:
                api_params["frequency_penalty"] = self.frequency_penalty
            if self.presence_penalty != 0.0:
                api_params["presence_penalty"] = self.presence_penalty
            if self.stop is not None:
                api_params["stop"] = self.stop
            if self.seed is not None:
                api_params["seed"] = self.seed
            
            stream = self.client.chat.completions.create(**api_params)

            # –§–∞–∑–∞ 2: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
            status_message['text'] = t('Ai thinking...')
            
            # –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Live
            first_content_chunk = None
            for chunk in stream:
                if interrupted.is_set():
                    raise KeyboardInterrupt("Stream interrupted")
                if chunk.choices[0].delta.content:
                    first_content_chunk = chunk.choices[0].delta.content
                    reply_parts.append(first_content_chunk)
                    break
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞
            stop_spinner.set()
            if spinner_thread.is_alive():
                spinner_thread.join(timeout=0.1)

            sleep_time = config.get("global", "sleep_time", 0.01)
            refresh_per_second = config.get("global", "refresh_per_second", 10)
            theme_name = config.get("global", "markdown_theme", "default")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Live –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Markdown
            with _get_live()(console=self.console, refresh_per_second=refresh_per_second, auto_refresh=True) as live:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
                if first_content_chunk:
                    markdown = _create_markdown(first_content_chunk, theme_name)
                    live.update(markdown)
                
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
                for chunk in stream:
                    if interrupted.is_set():
                        raise KeyboardInterrupt("Stream interrupted")
                    if chunk.choices[0].delta.content:
                        text = chunk.choices[0].delta.content
                        reply_parts.append(text)
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ Markdown
                        full_text = "".join(reply_parts)
                        markdown = _create_markdown(full_text, theme_name)
                        live.update(markdown)
                        time.sleep(sleep_time)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            reply = "".join(reply_parts)
            self.messages.append({"role": "assistant", "content": reply})
            return reply

        except KeyboardInterrupt:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            interrupted.set()
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
            stop_spinner.set()
            if spinner_thread.is_alive():
                spinner_thread.join(timeout=0.3)
            raise
        except Exception as e:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            stop_spinner.set()
            if spinner_thread.is_alive():
                spinner_thread.join(timeout=0.3)
            raise
  


    def __str__(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏.

        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ `api_key` –º–∞—Å–∫–∏—Ä—É–µ—Ç—Å—è (–≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞),
        –∞ —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –∫—Ä–∞—Ç–∫–æ.
        """

        items = {}
        for k, v in self.__dict__.items():
            if k == 'api_key':
                items[k] = format_api_key_display(v)
            elif k == 'messages' or k == 'console' or k == '_client':
                continue
            else:
                try:
                    items[k] = v
                except Exception:
                    items[k] = f"<unrepr {type(v).__name__}>"

        parts = [f"{self.__class__.__name__}("]
        for key, val in items.items():
            parts.append(f"  {key}={val!r},")
        parts.append(")")
        return "\n".join(parts)
