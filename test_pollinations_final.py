#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç PollinationsClient
"""

import sys
sys.path.insert(0, 'src')


def test_models_filtering():
    """–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ anonymous –º–æ–¥–µ–ª–µ–π"""
    print("=" * 60)
    print("–¢–ï–°–¢: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ tier=anonymous)")
    print("=" * 60)
    
    from penguin_tamer.llm_clients.pollinations_client import PollinationsClient
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
    models = PollinationsClient.fetch_models(
        api_list_url="",
        api_key="",
        model_filter=None
    )
    
    print(f"\n–ü–æ–ª—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
    
    if len(models) == 0:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –º–æ–¥–µ–ª–µ–π!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    import requests
    response = requests.get("https://text.pollinations.ai/models", timeout=10)
    all_models = response.json()
    
    # –°–æ–∑–¥–∞—ë–º lookup –ø–æ –∏–º–µ–Ω–∏
    models_by_name = {m.get('name'): m for m in all_models}
    
    all_anonymous = True
    for model in models:
        model_id = model['id']
        if model_id in models_by_name:
            tier = models_by_name[model_id].get('tier', 'unknown')
            status = "‚úì" if tier == 'anonymous' else "‚úó"
            print(f"  {status} {model_id:20} tier={tier}")
            if tier != 'anonymous':
                all_anonymous = False
        else:
            print(f"  ? {model_id:20} –ù–ï –ù–ê–ô–î–ï–ù–ê –í API")
            all_anonymous = False
    
    print()
    if all_anonymous:
        print("‚úÖ –£–°–ü–ï–®–ù–û: –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç tier=anonymous")
        return True
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ tier!")
        return False


def test_client_creation():
    """–¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ PollinationsClient")
    print("=" * 60)
    
    try:
        from penguin_tamer.llm_clients.pollinations_client import PollinationsClient
        from penguin_tamer.llm_clients.base import LLMConfig
        from rich.console import Console
        
        config = LLMConfig(
            api_url="https://text.pollinations.ai",
            api_key="",
            model="openai",
            temperature=0.7,
            max_tokens=100
        )
        
        console = Console()
        system_message = [{"role": "system", "content": "You are a helpful assistant."}]
        
        client = PollinationsClient(
            console=console,
            system_message=system_message,
            llm_config=config
        )
        
        print(f"\n‚úì –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"  –ú–æ–¥–µ–ª—å: {client.model}")
        print(f"  API URL: {client.api_url}")
        print(f"  Temperature: {client.temperature}")
        print(f"  Max tokens: {client.max_tokens}")
        
        print("\n‚úÖ –£–°–ü–ï–®–ù–û: –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_api_key_check_bypass():
    """–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ API –∫–ª—é—á–∞ –¥–ª—è Pollinations –≤ cli.py"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ API –∫–ª—é—á–∞ –¥–ª—è Pollinations")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ cli.py –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è pollinations
    try:
        with open('src/penguin_tamer/cli.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π client_name
        if 'client_name != "pollinations"' in content or 'client_name == "pollinations"' in content:
            print("\n‚úì –ù–∞–π–¥–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ client_name –¥–ª—è Pollinations")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
            if '# Check if API key exists' in content and not '# –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û' in content:
                print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                print("\n‚úÖ –£–°–ü–ï–®–ù–û: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ API –∫–ª—é—á–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                return True
            else:
                print("‚úó –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        else:
            print("\n‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Pollinations")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False


def main():
    print("\n" + "=" * 60)
    print("–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POLLINATIONS")
    print("=" * 60 + "\n")
    
    results = {
        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π": test_models_filtering(),
        "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞": test_client_creation(),
        "–ü—Ä–æ–ø—É—Å–∫ API –∫–ª—é—á–∞": test_api_key_check_bypass()
    }
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò")
    print("=" * 60)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:.<35} {status}")
    
    passed = sum(results.values())
    total = len(results)
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    else:
        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}")
    
    print("=" * 60 + "\n")


if __name__ == "__main__":
    main()
